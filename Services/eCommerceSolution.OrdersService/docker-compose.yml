services:
  ordersmicroservice.api:
    image: ordersmicroserviceapi
    build:
      context: .
      dockerfile: OrdersMicroservice.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - MONGODB_HOST=mongodb-container
      - MONGODB_DATABASE=OrdersDatabase
      - MONGODB_PORT=27017
      - UsersMicroserviceName=users-microservice
      - UsersMicroservicePort=9090
      - ProductsMicroserviceName=products-microservice
      - ProductsMicroservicePort=8080
      - REDIS_HOST=redis-container
      - REDIS_PORT=6379
    ports:
     - "7000:8080"
    networks:
     - orders-mongodb-network
     - ecommerce-network
    depends_on:
      - mongodb-container

  mongodb-container:
   image: mongo:latest
   ports:
    - "27017:27017"
   volumes:
    - ../../mongo-init:/docker-entrypoint-initdb.d
   networks:
    - orders-mongodb-network

  products-microservice:
    image: products-microservice
    environment:
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_ENVIRONMENT=Development
      - MYSQL_HOST=mysql-container
      - MYSQL_DATABASE=ecommerceproductsdatabase
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=admin
    ports:
     - "6001:8080"
    networks:
     - products-mysql-network
     - ecommerce-network
    depends_on:
      - mysql-container
  
  mysql-container:
     image: mysql:8.0
     environment:
       - MYSQL_ROOT_PASSWORD=admin
     ports:
      - "3307:3306"
     volumes:
      - ../../mysql-init:/docker-entrypoint-initdb.d
     networks:
      - products-mysql-network

  users-microservice:
    image: users-microservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - POSTGRES_HOST=postgres-container
      - POSTGRES_DATABASE=eCommerceUsers
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
    ports:
     - "5000:9090"
    networks:
     - users-postgres-network
     - ecommerce-network
    depends_on:
      - postgres-container

  postgres-container:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=eCommerceUsers
    ports:
     - "5433:5432"
    volumes:
      - ../../postgres-init:/docker-entrypoint-initdb.d 
    networks:
     - users-postgres-network

  redis-container:
   image: redis:latest
   ports:
     - "6379:6379"
   volumes:
     - ../../redis-cache:/data
   networks:
     - ecommerce-network

  apigateway:
    image: apigateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
     - "4000:8080"
    networks:
     - ecommerce-network
    

networks:
 orders-mongodb-network:
  driver: bridge
 products-mysql-network:
  driver: bridge
 users-postgres-network:
  driver: bridge
 ecommerce-network:
    driver: bridge
    
# To Build, Tag & Push the images, you can use the following commands:

# docker login --username rajatpandey121237 --password <your-password>

# docker build -t products-microservice:latest -f ./ProductsMicroService.API/Dockerfile .
# docker tag products-microservice:latest rajatpandey121237/products-microservice:v1.0
# docker push rajatpandey121237/products-microservice:v1.0

# docker build -t users-microservice:latest -f ./eCommerce.API/Dockerfile .
# docker tag users-microservice:latest rajatpandey121237/users-microservice:v1.0
# docker push rajatpandey121237/users-microservice:v1.0

# docker build -t orders-microservice:latest -f ./OrdersMicroservice.API/Dockerfile .
# docker tag orders-microservice:latest rajatpandey121237/orders-microservice:v1.0
# docker push rajatpandey121237/orders-microservice:v1.0